#! /bin/bash

# Run this script to update the service file copies regarding netns
# in /etc/systemd/system. This script ensures that copies of the base
# service files exist for each configured NSTYPE and removes stale ones.
#
# It also fixes a possible problem due to the bug
# https://github.com/systemd/systemd/issues/37329 if any of the units
# is in a failed state, by resetting that state; although that bug is
# related to symbolic links and we can't use those anyway.
#
# Options:
#   --daemon-reload : Force systemd daemon-reload at the end.
#   --clean         : Remove all managed netns service files.
#   -h, --help      : Show this help message.

# Exit on error, unset variable, or pipe failure.
set -euo pipefail

# --- Static Configuration ---
CONF_DIR="/etc/conf.d/netns"
SYSTEMD_ETC_DIR="/etc/systemd/system"
TARGET_SERVICE_NETNS="/usr/lib/systemd/system/netns@.service"
TARGET_SERVICE_OUTSIDE="/usr/lib/systemd/system/netns_outside@.service"

# --- Default values for options ---
force_daemon_reload=false
clean_mode=false

# --- Usage Function ---
usage() {
  echo "Usage: $0 [options]"
  echo ""
  echo "Updates systemd service file copies for netns configurations."
  echo ""
  echo "Options:"
  echo "  --daemon-reload  Force systemd daemon-reload at the end, even if no changes are detected."
  echo "  --clean          Remove all managed netns service files from ${SYSTEMD_ETC_DIR},"
  echo "                   as if no configurations exist in ${CONF_DIR}."
  echo "  -h, --help       Show this help message."
  exit 1
}

# --- Parse Command Line Arguments ---
while [[ $# -gt 0 ]]; do
  case "$1" in
    --daemon-reload)
      force_daemon_reload=true
      shift # past argument
      ;;
    --clean)
      clean_mode=true
      shift # past argument
      ;;
    -h|--help)
      usage
      ;;
    *)
      echo "Error: Unknown option '$1'" >&2
      usage
      ;;
  esac
done

# --- Sanity Checks ---

if [[ "$(id -u)" -ne 0 ]]; then
  echo "Error: This script must be run as root." >&2
  exit 1
fi

# CONF_DIR check is only relevant if not in clean_mode.
if ! $clean_mode && [[ ! -d "$CONF_DIR" ]]; then
  echo "Error: Configuration directory '$CONF_DIR' not found." >&2
  exit 1
fi

if [[ ! -d "$SYSTEMD_ETC_DIR" ]]; then
  echo "Error: Systemd system directory '$SYSTEMD_ETC_DIR' not found." >&2
  exit 1
fi

# Source service files must exist for copy operations, unless in clean mode (where no copies happen).
if ! $clean_mode && [[ ! -f "$TARGET_SERVICE_NETNS" ]]; then
  echo "Error: Source service file '$TARGET_SERVICE_NETNS' not found." >&2
  exit 1
fi
if ! $clean_mode &&  [[ ! -f "$TARGET_SERVICE_OUTSIDE" ]]; then
  echo "Error: Source service file '$TARGET_SERVICE_OUTSIDE' not found." >&2
  exit 1
fi

# --- Process Configuration Files and Manage Service File Copies ---

# Use an associative array to keep track of the files that *should* exist.
# Keys are the file basenames, values can be anything (e.g., 1).
declare -A expected_files
needs_daemon_reload=$force_daemon_reload
error=false

# In clean mode, expected_files remains empty, so all managed files will be removed later.
if ! $clean_mode; then

  echo "Processing configuration files in '$CONF_DIR'..."

  declare -A unique_nstypes    # Associative array to store unique NSTYPEs.
  # Populate unique_nstypes.
  while IFS= read -r -d $'\0' conf_file; do
    filename=$(basename "$conf_file")   # e.g., "nstype.conf" or "nstype-nsname.conf".
    
    # Extract the part before .conf. e.g., "nstype" or "nstype-nsname".
    local base_name="${filename%.conf}"

    local current_nstype
    # Check if it was an NSTYPE-NSNAME.conf pattern by looking for a hyphen.
    if [[ "$base_name" == *-* ]]; then
      # Extract just the NSTYPE part (before the first hyphen).
      current_nstype="${base_name%%-*}" 
    else
      # It was an NSTYPE.conf pattern.
      current_nstype="$base_name"
    fi

    # 'default' is not a valid NSTYPE.
    if [[ "$current_nstype" == "default" ]]; then
      continue
    fi

    if [[ -z "$current_nstype" ]]; then
      echo "Warning: Could not extract NSTYPE from '$filename' (resulted in empty string). Skipping." >&2
      error=true
      continue
    fi
    
    # Add to associative array. Duplicates will just overwrite with the same value.
    unique_nstypes["$current_nstype"]=1
    
  done < <(find "$CONF_DIR" -maxdepth 1 -type f -name '*.conf' -print0)

  # Now loop over the unique NSTYPEs found.
  for nstype in "${!unique_nstypes[@]}"; do
    echo "Checking NSTYPE '$nstype'."

    if [[ ! -f "/usr/share/systemd-netns/${nstype}.sh" && ! -f "${CONF_DIR}/${nstype}.sh" ]]; then
      echo "  Warning: ${CONF_DIR}/${nstype}.sh does not exist. Skipping."
      error=true
      continue
    fi

    # Define expected destination file names and paths.
    dest_name_netns="netns-${nstype}@.service"
    dest_path_netns="${SYSTEMD_ETC_DIR}/${dest_name_netns}"
    dest_name_outside="netns_outside-${nstype}@.service"
    dest_path_outside="${SYSTEMD_ETC_DIR}/${dest_name_outside}"

    # Add expected file names to our tracking array.
    expected_files["$dest_name_netns"]=1
    expected_files["$dest_name_outside"]=1

    # --- Process netns@.service target ---
    source_file="$TARGET_SERVICE_NETNS"
    dest_path="$dest_path_netns"

    # Check if the destination exists and is a symlink.
    if [[ -L "$dest_path" ]]; then
      echo "  Warning: '$dest_path' exists as a symlink. Removing it."
      if rm "$dest_path"; then
        needs_daemon_reload=true
      else
        echo "  Error removing symlink '$dest_path'. Check permissions? Skipping update." >&2
        error=true
        continue # Skip processing this specific file pair.
      fi
    fi

    # Check if the destination file exists and if it differs from the source.
    should_copy=false
    if [[ ! -f "$dest_path" ]]; then
      echo "  Creating '$dest_path'."
      should_copy=true
    elif ! cmp -s "$source_file" "$dest_path"; then
      echo "  Updating '$dest_path'."
      should_copy=true
    fi

    if $should_copy; then
      # Copy the file, preserving metadata like permissions and timestamps if possible.
      if cp -p "$source_file" "$dest_path"; then
        needs_daemon_reload=true
      else
        echo "  Error copying '$source_file' to '$dest_path'. Check permissions?" >&2
        # Continue processing other files despite error; but exit with an error value.
        error=true
      fi
    fi

    # --- Process netns_outside@.service target ---
    source_file="$TARGET_SERVICE_OUTSIDE"
    dest_path="$dest_path_outside"

    # Check if the destination exists and is a symlink.
    if [[ -L "$dest_path" ]]; then
      echo "  Warning: '$dest_path' exists as a symlink. Removing it."
      if rm "$dest_path"; then
        needs_daemon_reload=true
      else
        echo "  Error removing symlink '$dest_path'. Check permissions? Skipping update." >&2
        error=true
        continue # Skip processing this specific file pair
      fi
    fi

    # Check if the destination file exists and if it differs from the source.
    should_copy=false
    if [[ ! -f "$dest_path" ]]; then
      echo "  Creating '$dest_path'."
      should_copy=true
    elif ! cmp -s "$source_file" "$dest_path"; then
      echo "  Updating '$dest_path'."
      should_copy=true
    fi

    if $should_copy; then
      # Copy the file, preserving metadata like permissions and timestamps if possible.
      if cp -p "$source_file" "$dest_path"; then
        needs_daemon_reload=true
      else
        echo "  Error copying '$source_file' to '$dest_path'. Check permissions?" >&2
        error=true
        # Continue processing other files despite error? Yes.
      fi
    fi

  done < <(find "$CONF_DIR" -maxdepth 1 -type f -name '*-*.conf' -prune -o -name '*.conf' -print0)

fi # clean_mode

# --- Clean Up Stale Files/Symlinks ---

# Find all files or symlinks in the target directory matching our patterns.
while IFS= read -r -d $'\0' file_path; do
  file_name=$(basename "$file_path")

  # Check if the current file's basename is in our list of expected files.
  if [[ ! -v expected_files["$file_name"] ]]; then
    # The path might point to a symlink or a regular file. rm works for both.
    if rm "$file_path"; then
      echo "Removed stale service file $file_path"
      needs_daemon_reload=true
    else
      echo "Error removing stale '$file_path'. Check permissions?" >&2
      error=true
    fi
  # else # Optional: Log kept files.
  #   echo "  Keeping required file: $file_path"
  fi
done < <(find "$SYSTEMD_ETC_DIR" -maxdepth 1 \( -name 'netns-*@.service' -o -name 'netns_outside-*@.service' \) -print0)

# --- Reset Failed Units ---

# Use process substitution to read unit names safely.
# Look for failed units potentially created from our template copies.
# Note: Systemd might track failures based on the original template name too.
# Checking for both specific instances and the template might be necessary in complex cases,
# but checking for instantiated units is usually sufficient.
while IFS= read -r unit_name; do
  # Skip empty lines potentially generated by awk/systemctl.
  [[ -z "$unit_name" ]] && continue

  # Check if the unit name matches our expected patterns - defense against unrelated failed units
  if [[ "$unit_name" == netns-*@*.service || "$unit_name" == netns_outside-*@*.service ]]; then
    if systemctl reset-failed "$unit_name"; then
      echo "Reset failed state on unit '$unit_name'."
    else
      # Log error but continue; reset-failed might fail if state changed.
      echo "Warning: Failed to reset failed state on unit '$unit_name'." >&2
    fi
  fi
done < <(systemctl list-units --all --no-legend --state=failed 'netns-*@*.service' 'netns_outside-*@*.service' | awk '{print $1}')

# Check template failures as well, just in case (less common for this issue).
while IFS= read -r unit_name; do
  [[ -z "$unit_name" ]] && continue
  if [[ "$unit_name" == netns@*.service || "$unit_name" == netns_outside@*.service ]]; then
    if systemctl reset-failed "$unit_name"; then
      echo "Reset failed-state on unit '$unit_name'."
    else
      echo "Warning: Failed to reset failed state on unit '$unit_name'." >&2
    fi
  fi
done < <(systemctl list-units --all --no-legend --state=failed 'netns@*.service' 'netns_outside@*.service' | awk '{print $2}')

# --- Final Steps ---

# Reload systemd daemon configuration if any files were created, updated, or removed.
if $needs_daemon_reload; then
    echo "Reloading systemd daemon configuration..."
    if systemctl daemon-reload; then
        echo "  Systemd daemon reloaded successfully."
    else
        echo "  Error reloading systemd daemon configuration." >&2
        error=true
    fi
fi

if ! $error; then
  echo "Update successful."
  exit 0
fi

exit 1
