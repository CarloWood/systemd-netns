#! /bin/bash

set -xe

function display_usage() {
  echo "Auto configuration for systemd-named-netns."
  echo -e "\nUsage:\n\t$0 network-type ns-name [optional params] [up|down] [inside|outside]\n"
  echo "Note: you may need root privileges for this."
}

# Function: assert_non_empty
#
# Description: Checks if a variable named by the first argument ($1) is set
#              and non-empty. If not, prints an error message to stderr
#              and exits the entire script with status 1.
#
# Usage: assert_non_empty <VARIABLE_NAME>
assert_non_empty() {
  local var_name="$1"

  # Check if an argument (variable name) was provided to the function.
  if [[ -z "$var_name" ]]; then
    echo "Usage: assert_non_empty <VARIABLE_NAME>" >&2
    echo "Error: No variable name specified." >&2
    exit 1
  fi

  # Check if the variable is set using indirect expansion check '-v'.
  # The '-v' operator checks if a variable *with the given name* exists.
  if ! [[ -v $var_name ]]; then
    echo "Variable $var_name is not set!" >&2
    exit 1 # Exit the *entire script* with error code 1.
  fi

  # Check if the variable is empty using indirect expansion '${!var_name}'
  # ${!var_name} gets the *value* of the variable whose name is stored in var_name.
  # The '-z' operator checks if the string (the variable's value) is empty.
  if [[ -z "${!var_name}" ]]; then
    echo "Variable $var_name is empty!" >&2
    exit 1 # Exit the *entire script* with error code 1.
  fi
}

function inside_check() {
  NSNAME="$1"
  UPDOWN="$2"

  GLOBAL_NETNS_ID="$(readlink /proc/1/ns/net)"
  if [[ -z "$GLOBAL_NETNS_ID" ]]; then
    echo "Failure to get global netns ID."
    exit 1
  fi

  CURRENT_NETNS_ID="$(readlink /proc/$$/ns/net)"
  if [[ -z "$CURRENT_NETNS_ID" ]]; then
    echo "Failure to get current netns ID."
    exit 1
  fi

  if [[ "$CURRENT_NETNS_ID" == "$GLOBAL_NETNS_ID" ]]; then
    echo "Current netns is the global netns!"
    exit 1
  fi

  CURRENT_NETNS_NAME="$(ip netns identify)"
  if [[ -z "$CURRENT_NETNS_NAME" || "$CURRENT_NETNS_NAME" != "$NSNAME" ]]; then
    echo "Current netns (\"$CURRENT_NETNS_NAME\") is not equal to the required netns \"$NSNAME\"!"
    if [[ "$UPDOWN" != "down" ]]; then
      exit 1
    fi
  fi

  echo "Running in the expected netns."
}

function autoconfigure() {
  NSTYPE="$1"
  NSNAME="$2"

  args=("$@")

  UPDOWN="${args[-2]}"
  INOUT="${args[-1]}"

  if [[ "${INOUT}" == "inside" ]]; then
    inside_check ${NSNAME} ${UPDOWN}
  fi

  echo "Starting 'configure_${NSTYPE}_${UPDOWN}_${INOUT}' for netns '${NSNAME}'."

  if [[ -f /usr/share/systemd-netns/${NSTYPE}.sh ]]; then
    source /usr/share/systemd-netns/${NSTYPE}.sh
  else
    source /etc/conf.d/netns/${NSTYPE}.sh
  fi

  # This is always sourced, it can be used to add values that are the same for a lot of %J values.
  source /etc/conf.d/netns/default.conf
  # Load instance-specific environment variables.
  # At least one of these files should exist, but maybe for the wrong NSNAME - so lets test this anyway.
  if [[ ! -f /etc/conf.d/netns/${NSTYPE}.conf && ! -f /etc/conf.d/netns/${NSTYPE}-${NSNAME}.conf ]]; then
    echo "Missing configuration file(s)."
    return 1
  fi
  ! source /etc/conf.d/netns/${NSTYPE}.conf
  ! source /etc/conf.d/netns/${NSTYPE}-${NSNAME}.conf

  if type -t configure_"${NSTYPE}_${UPDOWN}_${INOUT}" >/dev/null ; then
    N=${#args[@]}               # Get the total number of arguments (N).
    length=$(( N - 3 ))         # The number of arguments to pass.
    subset=("${args[@]:1:$length}")
    configure_"${NSTYPE}_${UPDOWN}_${INOUT}" "${subset[@]}"
  else
    echo "No configuration required."
  fi

  return 0
}

if [[ $# -lt 4 ]]; then
  display_usage
  exit 1
fi

case "$1" in
  "--help" | "-h")
    display_usage
    exit 0
    ;;
  *)
    autoconfigure "$@"
    exit 0
    ;;
esac
